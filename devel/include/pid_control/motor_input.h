// Generated by gencpp from file pid_control/motor_input.msg
// DO NOT EDIT!


#ifndef PID_CONTROL_MESSAGE_MOTOR_INPUT_H
#define PID_CONTROL_MESSAGE_MOTOR_INPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pid_control
{
template <class ContainerAllocator>
struct motor_input_
{
  typedef motor_input_<ContainerAllocator> Type;

  motor_input_()
    : input(0.0)
    , time(0.0)  {
    }
  motor_input_(const ContainerAllocator& _alloc)
    : input(0.0)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef float _input_type;
  _input_type input;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::pid_control::motor_input_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pid_control::motor_input_<ContainerAllocator> const> ConstPtr;

}; // struct motor_input_

typedef ::pid_control::motor_input_<std::allocator<void> > motor_input;

typedef boost::shared_ptr< ::pid_control::motor_input > motor_inputPtr;
typedef boost::shared_ptr< ::pid_control::motor_input const> motor_inputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pid_control::motor_input_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pid_control::motor_input_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pid_control::motor_input_<ContainerAllocator1> & lhs, const ::pid_control::motor_input_<ContainerAllocator2> & rhs)
{
  return lhs.input == rhs.input &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pid_control::motor_input_<ContainerAllocator1> & lhs, const ::pid_control::motor_input_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pid_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pid_control::motor_input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pid_control::motor_input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pid_control::motor_input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pid_control::motor_input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pid_control::motor_input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pid_control::motor_input_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pid_control::motor_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68938b46224a92992b7cd8fd6233cc91";
  }

  static const char* value(const ::pid_control::motor_input_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68938b46224a9299ULL;
  static const uint64_t static_value2 = 0x2b7cd8fd6233cc91ULL;
};

template<class ContainerAllocator>
struct DataType< ::pid_control::motor_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pid_control/motor_input";
  }

  static const char* value(const ::pid_control::motor_input_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pid_control::motor_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 input\n"
"float64 time\n"
;
  }

  static const char* value(const ::pid_control::motor_input_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pid_control::motor_input_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_input_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pid_control::motor_input_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pid_control::motor_input_<ContainerAllocator>& v)
  {
    s << indent << "input: ";
    Printer<float>::stream(s, indent + "  ", v.input);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PID_CONTROL_MESSAGE_MOTOR_INPUT_H
